package org.artifactory.api.bintray.distribution;

import com.google.common.collect.Multimap;
import org.artifactory.api.bintray.BintrayUploadInfo;
import org.artifactory.api.bintray.distribution.model.DistributionRepoCreationDetails;
import org.artifactory.api.bintray.distribution.resolver.DistributionCoordinatesResolver;
import org.artifactory.api.common.BasicStatusHolder;
import org.artifactory.api.repo.Async;
import org.artifactory.descriptor.repo.BintrayApplicationConfig;
import org.artifactory.descriptor.repo.distribution.DistributionCoordinates;
import org.artifactory.descriptor.repo.distribution.DistributionRepoDescriptor;
import org.artifactory.descriptor.repo.distribution.rule.DistributionRule;
import org.artifactory.repo.RepoPath;

import java.io.IOException;
import java.util.List;

/**
 * Interface defining the set of actions a Distribution Repo uses.
 *
 * @author Dan Feldman
 */
public interface DistributionService {

    /**
     * First call made by the creation wizard, uses the client id and temp secret
     * generated by Bintray to establish trust and acquire a token and a refresh token
     *
     * @param clientId    Client id generated by Bintray
     * @param secret      Client secret generated by Bintray
     * @param code        Code sent back with initial request that should be sent when acquiring token
     * @param scope       Scope of authorization used by this app (generated by Bintray according to org)
     * @param redirectUrl redirect url given in the initial request (must be identical)
     * @return Key of the newly created  {@link BintrayApplicationConfig} that enables working with this
     * Bintray OAuth Application
     */
    DistributionRepoCreationDetails createBintrayAppConfig(String clientId, String secret, String code, String scope, String redirectUrl) throws IOException;

    /**
     * Executes a 'refresh token' call in cases where the current token has expired and saves the new token
     * in the config where {@param bintrayAppKey} is the key.
     * Will save the change to the corresponding {@link BintrayApplicationConfig} if the returned refresh token has changed.
     *
     * @param repoKey Repository to update the token for.
     * @return the new OAuth token to access the Bintray OAuth app denoted by {@param bintrayAppKey}
     */
    String refreshBintrayOAuthAppToken(String repoKey) throws Exception;

    /**
     * Tries to match each path from {@param paths} to the repo's {@link DistributionRule} (passed as {@param repoRules})
     * that matches it most either by type (and path filtration if defined) or solely by path filtration.
     * If no rules of the same type match an attempt to match against the generic rules will be made, if any were defined
     * for the repo.
     * Also populates each of the coordinate's {@link BintrayUploadInfo} that will
     * be used eventually when pushing artifacts to Bintray using the {@param descriptor}
     *
     * @return The mapping of path in Artifactory to it's path ({@link DistributionCoordinates}) in Bintray.
     */
    Multimap<BintrayUploadInfo, DistributionCoordinatesResolver> coordinatesForPaths(List<RepoPath> paths, List<DistributionRule> repoRules,
            DistributionRepoDescriptor descriptor, BasicStatusHolder status);

    /**
     * Returns UI specific info for create/update repo wizard of {@param repoKey} - org licenses, the bintray Oauth app
     * flow), and is the org premium.
     */
    DistributionRepoCreationDetails getRepoCreationDetails(String repoKey) throws IOException;

    /**
     * Calls the repo specified in {@param distribution} - {@link Distribution#targetRepo} to distribute the artifacts
     * specified in {@link Distribution#paths} using the other setting as well.
     */
    BasicStatusHolder distribute(Distribution distribution);

    @Async
    BasicStatusHolder distributeInternal(Distribution distribution);
}
